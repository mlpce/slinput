/**
@file slinput.h
@brief slinput header
*/
#ifndef SLINPUT_HEADER_INCLUDED
#define SLINPUT_HEADER_INCLUDED

#include <stddef.h>
#include <stdint.h>

#include "slinput_config.h"

/**
 * Key codes generated by SLINPUT_GetCharIn.
 */
typedef enum SLINPUT_KeyCode {
  SLINPUT_KC_NUL,
  SLINPUT_KC_UP,
  SLINPUT_KC_LEFT,
  SLINPUT_KC_RIGHT,
  SLINPUT_KC_DOWN,
  SLINPUT_KC_WARP_LEFT,
  SLINPUT_KC_WARP_RIGHT,
  SLINPUT_KC_HOME,
  SLINPUT_KC_END,
  SLINPUT_KC_TAB,
  SLINPUT_KC_DEL,
  SLINPUT_KC_BACKSPACE,
  SLINPUT_KC_ESCAPE,
  SLINPUT_KC_END_OF_TRANSMISSION,

  SLINPUT_KC_MAX
} SLINPUT_KeyCode;

/**
 * Cursor control codes used by SLINPUT_CursorControl.
 */
typedef enum SLINPUT_CursorControlCode {
  SLINPUT_CCC_CURSOR_RIGHT,
  SLINPUT_CCC_CURSOR_LEFT,
  SLINPUT_CCC_CLEAR_TO_END_OF_LINE,
  SLINPUT_CCC_ENABLE_CURSOR,
  SLINPUT_CCC_DISABLE_CURSOR,
  SLINPUT_CCC_SAVE_CURSOR,
  SLINPUT_CCC_RESTORE_CURSOR,
  SLINPUT_CCC_CLEAR_LINE,
  SLINPUT_CCC_WRAP_ON,
  SLINPUT_CCC_WRAP_OFF,

  SLINPUT_CCC_MAX
} SLINPUT_CursorControlCode;

/**
 * Used to represent the input or output stream. Set custom streams using
 * SLINPUT_Set_Streams after creating the state with SLINPUT_CreateState.
 */
typedef struct SLINPUT_Stream {
  void *stream_data;  /**< Pointer to data for implementation */
} SLINPUT_Stream;

/**
 * Used to store the previous terminal attributes from a call to
 * SLINPUT_EnterRaw. These terminal attributes are restored by
 * SLINPUT_LeaveRaw.
 */
typedef struct SLINPUT_TermAttr {
  void *term_attr_data;  /**< Pointer to data for implementation */
} SLINPUT_TermAttr;

/**
 * Allocation information passed as parameter to SLINPUT_Malloc and
 * SLINPUT_Free. Specified using a parameter to SLINPUT_CreateState.
 */
typedef struct SLINPUT_AllocInfo {
  void *alloc_info_data;  /**< Pointer to data for implementation */
} SLINPUT_AllocInfo;

/**
 * Completion information passed as a parameter to SLINPUT_CompletionRequest.
 * Specified using a parameter to SLINPUT_Set_CompletionRequest.
 */
typedef struct SLINPUT_CompletionInfo {
  void *completion_info_data;  /**< Pointer to data for implementation */
} SLINPUT_CompletionInfo;

/**
 * State structure created by SLINPUT_CreateState and destroyed by
 * SLINPUT_DestroyState. Passed as parameter to functions and callbacks.
 */
typedef struct SLINPUT_State SLINPUT_State;

/**
 * Allocates memory.
 * @param[in] alloc_info allocation information that was passed to
 * SLINPUT_CreateState.
 * @param[in] size the number of bytes to allocate.
 * @return pointer to the allocated memory or null on failure.
 */
typedef void *SLINPUT_Malloc(
  SLINPUT_AllocInfo alloc_info,
  size_t size);

/**
 * Frees previously allocated memory.
 * @param[in] alloc_info allocation information that was passed to
 * SLINPUT_CreateState.
 * @param[in] ptr pointer to the memory to be freed.
 */
typedef void SLINPUT_Free(
  SLINPUT_AllocInfo alloc_info,
  void *ptr);

/***************************************************************************/
/* Input function types ****************************************************/
/***************************************************************************/

/**
 * Places the terminal into raw mode.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_in the input stream specified by SLINPUT_Set_Streams.
 * @param[out] original_term_attr location to store the original terminal
 * attributes
 * @return negative value on error, 0 on success.
 */
typedef int SLINPUT_EnterRaw(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_in,
  SLINPUT_TermAttr *original_term_attr);

/**
 * Restores the terminal from raw mode using the original terminal attributes
 * that were produced by SLINPUT_EnterRaw.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_in the input stream specified by SLINPUT_Set_Streams.
 * @param[in] previous_attr the original terminal attributes.
 * @return negative value on error, 0 on success.
 */
typedef int SLINPUT_LeaveRaw(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_in,
  SLINPUT_TermAttr previous_attr);

/**
 * Gets an input character or SLINPUT_KeyCode. This callback shall block until
 * input becomes available.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_in the input stream specified by SLINPUT_Set_Streams.
 * @param[out] key_code pointer for storing the key code, may be NULL.
 * @param[out] character pointer for storing the character, may be NULL.
 * @return negative value on error, 0 on success.
 */
typedef int SLINPUT_GetCharIn(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_in,
  SLINPUT_KeyCode *key_code,
  sli_char *character);

/**
 * Determines if a character is available on the input stream. This callback
 * shall not block.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_in the input stream specified by SLINPUT_Set_Streams.
 * @return negative value on error, 0 if a character is not available, 1
 * if a character is available.
 */
typedef int SLINPUT_IsCharAvailable(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_in);

/**
 * Determines if a character is a space character. Used during cursor warping
 * between words (SLINPUT_KC_WARP_LEFT and SLINPUT_KC_WARP_RIGHT).
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_in the input stream specified by SLINPUT_Set_Streams.
 * @param[in] character the character to be checked.
 * @return non-zero if the character is a space, this callback must always
 * succeed.
 */
typedef int SLINPUT_IsSpace(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_in,
  sli_char character);

/***************************************************************************/
/* Output function types ***************************************************/
/***************************************************************************/

/**
 * Performs cursor control (movement, erasures ... )
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_out the output stream specified by SLINPUT_Set_Streams.
 * @param[in] cursor_control_code the control operation
 * @return negative value on error
 */
typedef int SLINPUT_CursorControl(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_out,
  SLINPUT_CursorControlCode cursor_control_code);

/**
 * Puts a character to the output stream.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_out the output stream specified by SLINPUT_Set_Streams.
 * @param[in] c the character to be output
 * @return negative value on error, 0 on success.
 */
typedef int SLINPUT_Putchar(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_out,
  sli_char c);

/**
 * Flushes the output stream.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_out the output stream specified by SLINPUT_Set_Streams.
 * @return negative value on error, 0 on success.
 */
typedef int SLINPUT_Flush(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_out);

/**
 * Determines the width of the terminal in columns.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_in the input stream specified by SLINPUT_Set_Streams.
 * @param[out] width the width of the terminal.
 * @return negative value on error, 0 on success.
 */
typedef int SLINPUT_GetTerminalWidth(
  const SLINPUT_State *state,
  SLINPUT_Stream stream_in,
  uint16_t *width);

/**
 * Callback to request completion information.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] completion_info completion information specified by
 * SLINPUT_Set_CompletionRequest.
 * @param[in] string_length the length of the string in string parameter
 * @param[in] string the current contents of the input buffer
 * @return negative value on error, 0 on success.
 */
typedef int SLINPUT_CompletionRequest(
  SLINPUT_State *state,
  SLINPUT_CompletionInfo completion_info,
  uint16_t string_length, const sli_char *string);

/***************************************************************************/
/* Setting callback pointers ***********************************************/
/***************************************************************************/

/**
 * Sets the callback for entering terminal raw mode.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] enter_raw_cb the callback pointer.
 */
void SLINPUT_Set_EnterRaw(
  SLINPUT_State *state,
  SLINPUT_EnterRaw *enter_raw_cb);

/**
 * Sets the callback for leaving terminal raw mode.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] leave_raw_cb the callback pointer.
 */
void SLINPUT_Set_LeaveRaw(
  SLINPUT_State *state,
  SLINPUT_LeaveRaw *leave_raw_cb);

/**
 * Sets the callback for getting the terminal width.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] get_terminal_width_cb the callback pointer.
 * @note This callback is not used if SLINPUT_Set_NumColumns is called with
 * non-zero columns.
 */
void SLINPUT_Set_GetTerminalWidth(
  SLINPUT_State *state,
  SLINPUT_GetTerminalWidth *get_terminal_width_cb);

/**
 * Sets the callback for getting a key code and character input
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] get_char_in_cb the callback pointer.
 */
void SLINPUT_Set_GetCharIn(
  SLINPUT_State *state,
  SLINPUT_GetCharIn *get_char_in_cb);

/**
 * Sets the callback for checking if a character is available
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] kb_is_char_available_cb the callback pointer.
 */
void SLINPUT_Set_IsCharAvailable(
  SLINPUT_State *state,
  SLINPUT_IsCharAvailable *kb_is_char_available_cb);

/**
 * Sets the callback for checking if a character is a space
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] is_space_cb the callback pointer.
 */
void SLINPUT_Set_IsSpace(
  SLINPUT_State *state,
  SLINPUT_IsSpace *is_space_cb);

/**
 * Sets the callback for cursor control
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] cursor_control_cb the callback pointer.
 */
void SLINPUT_Set_CursorControl(
  SLINPUT_State *state,
  SLINPUT_CursorControl *cursor_control_cb);

/**
 * Sets the callback for outputting a single character.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] put_char_cb the callback pointer.
 */
void SLINPUT_Set_Putchar(
  SLINPUT_State *state,
  SLINPUT_Putchar *put_char_cb);

/**
 * Sets the callback for flushing output.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] flush_cb the callback pointer.
 */
void SLINPUT_Set_Flush(
  SLINPUT_State *state,
  SLINPUT_Flush *flush_cb);

/**
 * Sets the  callback for a completion request.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] completion_info the completion info which will be passed to
 * SLINPUT_CompletionRequest when it is invoked.
 * @param[in] completion_request_cb the callback pointer.
 */
void SLINPUT_Set_CompletionRequest(
  SLINPUT_State *state,
  SLINPUT_CompletionInfo completion_info,
  SLINPUT_CompletionRequest *completion_request_cb);

/***************************************************************************/
/* Configuration ***********************************************************/
/***************************************************************************/

/**
 * Sets the terminal width in columns. If this function is not called or
 * num_columns is zero then SLINPUT_GetTerminalWidth callback will be used to
 * determine the terminal width.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] num_columns the width of the terminal in columns.
 */
void SLINPUT_Set_NumColumns(
  SLINPUT_State *state,
  uint16_t num_columns);

/**
 * Sets the cursor margin width in columns. When the cursor crosses this margin
 * scrolling will occur.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] cursor_margin the margin in columns.
 */
void SLINPUT_Set_CursorMargin(
  SLINPUT_State *state,
  uint16_t cursor_margin);

/**
 * Sets the character printed when left scroll is available.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] continuation_character_left the character.
 * @note If this function is not called, then '<' is used.
 */
void SLINPUT_Set_ContinuationCharacterLeft(
  SLINPUT_State *state,
  sli_char continuation_character_left);

/**
 * Sets the character printed when right scroll is available.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] continuation_character_right the character.
 * @note If this function is not called, then '>' is used.
 */
void SLINPUT_Set_ContinuationCharacterRight(
  SLINPUT_State *state,
  sli_char continuation_character_right);

/**
 * Sets the input and output streams.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] stream_in the input stream.
 * @param[in] stream_out the output stream.
 */
void SLINPUT_Set_Streams(
  SLINPUT_State *state,
  SLINPUT_Stream stream_in,
  SLINPUT_Stream stream_out);

/***************************************************************************/
/** State creation and destruction *****************************************/
/***************************************************************************/

/**
 * Creates the state structure.
 * @param[in] alloc_info the allocation info passed to SLINPUT_Malloc and
 * SLINPUT_Free when the allocation callbacks are invoked.
 * @param[in] malloc_cb the memory allocation callback.
 * @param[in] free_cb the memory freeing callback.
 * @return state pointer.
 * @note To use default malloc/free, pass null via alloc_info and null for
 * malloc_cb and free_cb.
 */
SLINPUT_State *SLINPUT_CreateState(
  SLINPUT_AllocInfo alloc_info,
  SLINPUT_Malloc malloc_cb,
  SLINPUT_Free free_cb);

/**
 * Destroys the state, releasing allocated memory and freeing the state.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 */
void SLINPUT_DestroyState(
  SLINPUT_State *state);

/***************************************************************************/
/* Single line input and history *******************************************/
/***************************************************************************/

/**
 * Displays the prompt and gets input into the supplied buffer using an input
 * loop.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] prompt the prompt to display
 * @param[in] initial the initial contents of the string buffer (can be NULL)
 * @param[in] buffer_chars the size of buffer in SLICHAR characters (not bytes)
 * @param[in] buffer the buffer to store the input
 * @return negative value on error, 0 EOT, >= 1 indicates num chars in buffer
 */
int SLINPUT_Get(
  SLINPUT_State *state,
  const sli_char *prompt,
  const sli_char *initial,
  uint16_t buffer_chars,
  sli_char *buffer);

/**
 * Saves a line of input into history. Carriage return and line feed characters
 * are removed.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] line the line of input to save
 * @return the number of lines in history or a negative value on error.
 */
int SLINPUT_Save(
  SLINPUT_State *state,
  const sli_char *line);

/**
 * Replaces the current input string with the completion string and redraws
 * Call during SLINPUT_CompletionRequest callback.
 * @param[in] state the state pointer created by SLINPUT_CreateState.
 * @param[in] string the completion string.
 * @return negative value on error, 0 on success.
 */
int SLINPUT_CompletionReplace(
  SLINPUT_State *state,
  const sli_char *string);

#endif
